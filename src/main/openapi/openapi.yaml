openapi: 3.0.1
info:
  contact:
    email: fosforito280@gmail.com
    name: Jens Leon Wagner
  description: An API for keeping track of your shared bills.
  termsOfService: ""
  title: Partido API
  version: 1.0.0
security:
- HTTP_BASIC: []
paths:
  /users/:
    get:
      description: Loads a list of Users
      parameters:
      - description: offset = size * desired page
        example: 0
        in: query
        name: offset
        schema:
          type: integer
      - description: Size of the page to retrieve.
        example: 10
        in: query
        name: size
        schema:
          type: integer
      - description: Order in which to retrieve the results. Multiple sort criteria
          can be passed.
        example: birthday DESC
        in: query
        name: sort
        schema:
          type: string
      - description: Allows to filter the collections of result by the value of field
          firstName
        example: John
        in: query
        name: firstName
        schema:
          type: string
      - description: Allows to filter the collections of result by the value of field
          lastName
        example: Doe
        in: query
        name: lastName
        schema:
          type: string
      - description: Allows to filter the collections of result by the value of field
          active
        example: true
        in: query
        name: active
        schema:
          type: boolean
      responses:
        200:
          content:
            application/json:
              example: |-
                [{
                  "id": "0e8dd830-ad98-11e6-bf2e-47644ada7c0f",
                  "firstName": "John",
                  "lastName": "Smith",
                  "birthday": 152755200000,
                  "active": true,
                  "rank": 1,
                  "company": "0e8cedd0-ad98-11e6-bf2e-47644ada7c0f"
                }]
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: Status 200
          headers:
            X-Page-Count:
              schema:
                type: integer
            X-Page-Number:
              schema:
                type: integer
            X-Total-Count:
              schema:
                type: integer
            X-Page-Size:
              schema:
                type: integer
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Status 400
      summary: Get a list of Users
      tags:
      - Users
      x-tags:
      - tag: Users
    post:
      description: Adds an User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          content:
            application/json:
              example: |-
                {
                  "id": "0e8dd830-ad98-11e6-bf2e-47644ada7c0f",
                  "firstName": "John",
                  "lastName": "Smith",
                  "birthday": 152755200000,
                  "active": true,
                  "rank": 1,
                  "company": "0e8cedd0-ad98-11e6-bf2e-47644ada7c0f"
                }
              schema:
                $ref: '#/components/schemas/User'
          description: Status 200
      summary: Create an User
      tags:
      - Users
      x-tags:
      - tag: Users
  /users/{userId}:
    delete:
      description: Deletes an User
      parameters:
      - description: Identifier of the User
        in: path
        name: userId
        required: true
        schema:
          type: number
      responses:
        200:
          content: {}
          description: Status 200
      summary: Delete an User
      tags:
      - Users
      x-tags:
      - tag: Users
    get:
      description: Loads an User
      parameters:
      - description: Identifier of the User
        example: 1.0
        in: path
        name: userId
        required: true
        schema:
          type: number
      responses:
        200:
          content:
            application/json:
              example: |-
                {
                  "id": "0e8dd830-ad98-11e6-bf2e-47644ada7c0f",
                  "firstName": "John",
                  "lastName": "Smith",
                  "birthday": 152755200000,
                  "active": true,
                  "rank": 1,
                  "company": "0e8cedd0-ad98-11e6-bf2e-47644ada7c0f"
                }
              schema:
                $ref: '#/components/schemas/User'
          description: Status 200
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Status 400
      summary: Load an individual User
      tags:
      - Users
      x-tags:
      - tag: Users
    put:
      description: Stores an User
      parameters:
      - description: Identifier of the User
        in: path
        name: userId
        required: true
        schema:
          type: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          content:
            application/json:
              example: |-
                {
                  "id": "0e8dd830-ad98-11e6-bf2e-47644ada7c0f",
                  "firstName": "John",
                  "lastName": "Smith",
                  "birthday": 152755200000,
                  "active": true,
                  "rank": 1,
                  "company": "0e8cedd0-ad98-11e6-bf2e-47644ada7c0f"
                }
              schema:
                $ref: '#/components/schemas/User'
          description: Status 200
      summary: Update an User
      tags:
      - Users
      x-tags:
      - tag: Users
  /groups/:
    get:
      description: Loads a list of Groups
      parameters:
      - description: offset = size * desired page
        example: 0
        in: query
        name: offset
        schema:
          type: integer
      - description: Size of the page to retrieve.
        example: 10
        in: query
        name: size
        schema:
          type: integer
      - description: 'Order in which to retrieve the results. Multiple sort criteria
          can be passed. Example: sort=age ASC,height DESC'
        example: name ASC
        in: query
        name: sort
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example: |-
                [{
                  "id": "0e8cedd0-ad98-11e6-bf2e-47644ada7c0f",
                  "name": "George Street Brewery",
                  "address":{
                    "street": "2 place de la Defense",
                    "zipcode": "92053",
                    "city": "Paris"
                  },
                  "tags":[
                    "brewery",
                    "beer",
                    "ale"
                  ]
                }]
              schema:
                items:
                  $ref: '#/components/schemas/Group'
                type: array
          description: Status 200
          headers:
            X-Page-Count:
              schema:
                type: integer
            X-Page-Number:
              schema:
                type: integer
            X-Total-Count:
              schema:
                type: integer
            X-Page-Size:
              schema:
                type: integer
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Status 400
      summary: Load a list of Groups
      tags:
      - Groups
      x-tags:
      - tag: Groups
    post:
      description: Adds a Group
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        200:
          content:
            application/json:
              example: |-
                {
                  "id": "0e8cedd0-ad98-11e6-bf2e-47644ada7c0f",
                  "name": "George Street Brewery",
                  "address":{
                    "street": "2 place de la Defense",
                    "zipcode": "92053",
                    "city": "Paris"
                  },
                  "tags":[
                    "brewery",
                    "beer",
                    "ale"
                  ]
                }
              schema:
                $ref: '#/components/schemas/Group'
          description: Status 200
      summary: Create a new Group
      tags:
      - Groups
      x-tags:
      - tag: Groups
  /groups/{groupId}:
    delete:
      description: Deletes a Group
      parameters:
      - description: Identifier of the Group
        in: path
        name: groupId
        required: true
        schema:
          type: number
      responses:
        200:
          content: {}
          description: Status 200
      summary: Delete a Group
      tags:
      - Groups
      x-tags:
      - tag: Groups
    get:
      description: Loads a Group
      parameters:
      - description: Identifier of the Group
        example: 1.0
        in: path
        name: groupId
        required: true
        schema:
          type: number
      responses:
        200:
          content:
            application/json:
              example: |-
                {
                  "id": "0e8cedd0-ad98-11e6-bf2e-47644ada7c0f",
                  "name": "George Street Brewery",
                  "address":{
                    "street": "2 place de la Defense",
                    "zipcode": "92053",
                    "city": "Paris"
                  },
                  "tags":[
                    "brewery",
                    "beer",
                    "ale"
                  ]
                }
              schema:
                $ref: '#/components/schemas/Group'
          description: Status 200
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Status 400
      summary: Load an individual Group
      tags:
      - Groups
      x-tags:
      - tag: Groups
    put:
      description: Stores a Group
      parameters:
      - description: Identifier of the Group
        in: path
        name: groupId
        required: true
        schema:
          type: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        200:
          content:
            application/json:
              example: |-
                {
                  "id": "0e8cedd0-ad98-11e6-bf2e-47644ada7c0f",
                  "name": "George Street Brewery",
                  "address":{
                    "street": "2 place de la Defense",
                    "zipcode": "92053",
                    "city": "Paris"
                  },
                  "tags":[
                    "brewery",
                    "beer",
                    "ale"
                  ]
                }
              schema:
                $ref: '#/components/schemas/Group'
          description: Status 200
      summary: Update a Group
      tags:
      - Groups
      x-tags:
      - tag: Groups
  /groups/{groupId}/bills:
    get:
      description: Loads a list of Bills in a specific Group
      parameters:
      - description: Identifier of the Group
        example: 1.0
        in: path
        name: groupId
        required: true
        schema:
          type: number
      - description: offset = size * desired page
        example: 0.0
        in: query
        name: offset
        schema:
          type: number
      - description: Size of the page to retrieve.
        example: 10
        in: query
        name: size
        schema:
          type: integer
      - description: 'Order in which to retrieve the results. Multiple sort criteria
          can be passed. Example: sort=age ASC,height DESC'
        example: name ASC
        in: query
        name: sort
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Bill'
                type: array
          description: Status 200
          headers:
            X-Page-Count:
              schema:
                type: integer
            X-Page-Number:
              schema:
                type: integer
            X-Total-Count:
              schema:
                type: integer
            X-Page-Size:
              schema:
                type: integer
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Status 400
      summary: Load a list of  Bills in a specific Group
      tags:
      - Bills
      x-tags:
      - tag: Bills
    post:
      description: Adds a Bill in a specific Group
      parameters:
      - description: Identifier of the Group
        in: path
        name: groupId
        required: true
        schema:
          type: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bill'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bill'
          description: Status 200
      summary: Create a new Bill in a specific Group
      tags:
      - Bills
      x-tags:
      - tag: Bills
  /groups/{groupId}/bills/{billId}:
    delete:
      description: Deletes a Bill in a specific Group
      parameters:
      - description: Identifier of the Group
        in: path
        name: groupId
        required: true
        schema:
          type: number
      - description: Identifier of the Bill
        in: path
        name: billId
        required: true
        schema:
          type: number
      responses:
        200:
          content: {}
          description: Status 200
      summary: Delete a Bill in a specific Group
      tags:
      - Bills
      x-tags:
      - tag: Bills
    get:
      description: Loads a Bill in a specific Group
      parameters:
      - description: Identifier of the Group
        example: 1.0
        in: path
        name: groupId
        required: true
        schema:
          type: number
      - description: Identifier of the Bill
        example: 1.0
        in: path
        name: billId
        required: true
        schema:
          type: number
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bill'
          description: Status 200
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Status 400
      summary: Load an individual Bill in a specific Group
      tags:
      - Bills
      x-tags:
      - tag: Bills
    put:
      description: Stores a Bill in a specific Group
      parameters:
      - description: Identifier of the Group
        in: path
        name: groupId
        required: true
        schema:
          type: number
      - description: Identifier of the Bill
        in: path
        name: billId
        required: true
        schema:
          type: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bill'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bill'
          description: Status 200
      summary: Update a Bill in a specific Group
      tags:
      - Bills
      x-tags:
      - tag: Bills
components:
  schemas:
    Group:
      description: A representation of a Group.
      example: |-
        {
          'id': '1'
          'name': 'Group 123',
          'status': 'This is a tagline...',
          'founder': '1'
        }
      properties:
        id:
          description: Auto-generated primary key field
          type: integer
        name:
          type: string
        status:
          description: A status line or tagline, describing the group
          example: This is a tagline...
          type: string
        image:
          description: Group image
          format: binary
          type: string
        founder:
          description: User who founded the Group
          example: 1
          type: integer
      required:
      - founder
      - id
      - name
      type: object
    User:
      description: A representation of an User.
      example: |-
        {
          "id": "1",
          "firstNames": "John",
          "lastNames": "Smith",
          "birthday": 152755200000,
          "active": true,
          "company": "1"
        }
      properties:
        id:
          description: Auto-generated primary key field
          example: 1
          type: integer
        firstNames:
          example: Kurt
          type: string
        lastNames:
          example: Williams
          type: string
        email:
          description: Email address
          type: string
        password:
          description: Hashed password
          type: string
        birthday:
          description: Birthday as date
          format: date
          type: string
        active:
          default: true
          type: boolean
      required:
      - email
      - firstNames
      - id
      - lastNames
      - password
      type: object
    Bill:
      example:
        dateTime: 2000-01-23T04:56:07.000+00:00
        amount: 6.02745618307040320615897144307382404804229736328125
        creator: 5
        splits:
          amount: 9.301444243932575517419536481611430644989013671875
          debtor: 7
          id: 2
        attachments:
        - ""
        - ""
        description: description
        creditor: 5
        id: 0
        group: 1
      properties:
        id:
          description: Auto-generated primary key field
          type: integer
        description:
          description: Description of the bill
          type: string
        amount:
          description: Original amount of the bill
          type: number
        dateTime:
          description: Billing date and time
          format: date-time
          type: string
        group:
          description: Identifier of a Group where the bill belongs to
          type: integer
        creator:
          description: Which user created the bill?
          type: integer
        creditor:
          description: Which user has the role of the creditor or main bill payer?
            Can be different as the creator of a bill.
          type: integer
        splits:
          $ref: '#/components/schemas/Split'
        attachments:
          description: Attachments like fotos, pdf documents, etc
          items:
            format: binary
            type: string
          type: array
      required:
      - amount
      - creator
      - creditor
      - dateTime
      - description
      - group
      - id
      type: object
    Error:
      description: This general error structure is used throughout this API.
      example: |-
        {
          "code": 400,
          "description": "Bad query parameter [$size]: Invalid integer value [abc]",
          "reasonPhrase": "Bad Request"
        }
      properties:
        code:
          maximum: 599
          minimum: 400
          type: integer
        description:
          example: 'Bad query parameter [$size]: Invalid integer value [abc]'
          type: string
        reasonPhrase:
          example: Bad Request
          type: string
      required:
      - code
      type: object
    Split:
      description: A Split defines how much a debtor owes to a creditor. The Amount
        can be negative, in this case the debtor is not really a "debtor" because
        he will recieve money. But for naming conventions the creditor is always the
        "base" of a bill and the debtors give or recieve money from or to this owner.
      example:
        amount: 9.301444243932575517419536481611430644989013671875
        debtor: 7
        id: 2
      properties:
        id:
          description: Auto-generated value
          type: integer
        debtor:
          description: Identifier of an User
          type: integer
        amount:
          description: How much does the debtor owe? Negative values mean that he
            will recieve money and does not owe anything
          type: number
      required:
      - amount
      - debtor
      - id
      type: object
  securitySchemes:
    HTTP_BASIC:
      description: All GET methods are public, meaning that *you can read all the
        data*. Write operations require authentication and therefore are forbidden
        to the general public.
      scheme: basic
      type: http
